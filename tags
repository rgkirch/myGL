!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Composer	MyGL.cpp	/^Composer::Composer() {$/;"	f	class:Composer
Line	MyGL.cpp	/^Line::Line(float x, float y) {$/;"	f	class:Line
MyGL	MyGL.cpp	/^MyGL::MyGL() {$/;"	f	class:MyGL
PNG	MyGL.cpp	/^PNG::PNG() : imageName(NULL), data(NULL) {$/;"	f	class:PNG
PNG	MyGL.cpp	/^PNG::PNG(char imageName[]) : imageName(NULL), data(NULL) {$/;"	f	class:PNG
Rectangle	MyGL.cpp	/^Rectangle::Rectangle(float ax, float ay, float bx, float by) {$/;"	f	class:Rectangle
Rectangle	MyGL.cpp	/^Rectangle::Rectangle(float x, float y) {$/;"	f	class:Rectangle
ShaderProgram	MyGL.cpp	/^ShaderProgram::ShaderProgram(std::string vertexShaderFileName, std::string fragmentShaderFileName) {$/;"	f	class:ShaderProgram
Shape	MyGL.cpp	/^Shape::Shape() {$/;"	f	class:Shape
View	MyGL.cpp	/^View::View(Window* window, int width, int height) {$/;"	f	class:View
Window	MyGL.cpp	/^Window::Window(MyGL* parent, int width, int height) {$/;"	f	class:Window
bindBufferAndVao	MyGL.cpp	/^void Shape::bindBufferAndVao() {$/;"	f	class:Shape
checkShaderStepSuccess	MyGL.cpp	/^void ShaderProgram::checkShaderStepSuccess(GLuint shader, GLuint status) {$/;"	f	class:ShaderProgram
cursorMovement	MyGL.cpp	/^void Line::cursorMovement(CursorMovement cm) {$/;"	f	class:Line
cursor_position_callback	MyGL.cpp	/^void MyGL::cursor_position_callback(GLFWwindow* window, double xpos, double ypos) {$/;"	f	class:MyGL
dataLength	MyGL.cpp	/^int Line::dataLength() {$/;"	f	class:Line
dataLength	MyGL.cpp	/^int Rectangle::dataLength() {$/;"	f	class:Rectangle
draw	MyGL.cpp	/^void MyGL::draw() {$/;"	f	class:MyGL
drop_callback	MyGL.cpp	/^void MyGL::drop_callback(GLFWwindow* window, int count, const char** paths)$/;"	f	class:MyGL
finalRender	MyGL.cpp	/^void Shape::finalRender() {$/;"	f	class:Shape
finish	MyGL.cpp	/^void Shape::finish() {$/;"	f	class:Shape
frameRender	MyGL.cpp	/^void Shape::frameRender() {$/;"	f	class:Shape
genAndBindBufferAndVao	MyGL.cpp	/^void Shape::genAndBindBufferAndVao() {$/;"	f	class:Shape
getUniforms	MyGL.cpp	/^void ShaderProgram::getUniforms() {$/;"	f	class:ShaderProgram
height	MyGL.cpp	/^int PNG::height() {$/;"	f	class:PNG
id	MyGL.cpp	/^GLuint ShaderProgram::id() {$/;"	f	class:ShaderProgram
key_callback	MyGL.cpp	/^void MyGL::key_callback(GLFWwindow* window, int key, int scancode, int action, int mods) {$/;"	f	class:MyGL
mouseButton	MyGL.cpp	/^void Context::mouseButton(MouseButton input) {$/;"	f	class:Context
mouse_button_callback	MyGL.cpp	/^void MyGL::mouse_button_callback(GLFWwindow* window, int button, int action, int mods) {$/;"	f	class:MyGL
pixelToRealX	MyGL.cpp	/^double Window::pixelToRealX(double px) {$/;"	f	class:Window
pixelToRealY	MyGL.cpp	/^double Window::pixelToRealY(double py) {$/;"	f	class:Window
pixels	MyGL.cpp	/^unsigned char* PNG::pixels() {$/;"	f	class:PNG
prepareTheData	MyGL.cpp	/^void Line::prepareTheData() {$/;"	f	class:Line
prepareTheData	MyGL.cpp	/^void Rectangle::prepareTheData() {$/;"	f	class:Rectangle
printShaderLog	MyGL.cpp	/^void ShaderProgram::printShaderLog(char* errorMessage, GLuint shader) {$/;"	f	class:ShaderProgram
readFile	MyGL.cpp	/^std::string ShaderProgram::readFile(std::string fileName) {$/;"	f	class:ShaderProgram
readPNG	MyGL.cpp	/^unsigned char* PNG::readPNG(char* imageName) {$/;"	f	class:PNG
render	MyGL.cpp	/^void Composer::render() {$/;"	f	class:Composer
render	MyGL.cpp	/^void Shape::render() {$/;"	f	class:Shape
renderFunc	MyGL.cpp	/^typedef void (Shape::*renderFunc)();$/;"	t	file:
scale	MyGL.cpp	/^void View::scale(float num) {}$/;"	f	class:View
scroll_callback	MyGL.cpp	/^void MyGL::scroll_callback(GLFWwindow* window, double xoffset, double yoffset) {$/;"	f	class:MyGL
translate	MyGL.cpp	/^void View::translate(float x, float y) {$/;"	f	class:View
unbindBufferAndVao	MyGL.cpp	/^void Shape::unbindBufferAndVao() {$/;"	f	class:Shape
width	MyGL.cpp	/^int PNG::width() {$/;"	f	class:PNG
window_move_callback	MyGL.cpp	/^void MyGL::window_move_callback(GLFWwindow* window, int x, int y) {$/;"	f	class:MyGL
window_resize_callback	MyGL.cpp	/^void MyGL::window_resize_callback(GLFWwindow* window, int width, int height) {$/;"	f	class:MyGL
writePNG	MyGL.cpp	/^void PNG::writePNG(char imageName[], unsigned char* data, int width, int height) {$/;"	f	class:PNG
~Line	MyGL.cpp	/^Line::~Line() {$/;"	f	class:Line

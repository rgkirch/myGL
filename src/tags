!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Context	MyGL.cpp	/^Context::Context() {}$/;"	f	class:Context
Context	MyGL.hpp	/^class Context {$/;"	c
CursorMovement	MyGL.hpp	/^    CursorMovement(double xpos, double ypos) :x{xpos}, y{ypos} {}$/;"	f	class:CursorMovement
CursorMovement	MyGL.hpp	/^class CursorMovement : public Input {$/;"	c
GLEW_STATIC	MyGL.hpp	3;"	d
Input	MyGL.hpp	/^class Input {$/;"	c
Key	MyGL.hpp	/^    Key(int key, int scancode, int action, int mods) : key{key}, scancode{scancode}, action{action}, mods{mods} {}$/;"	f	class:Key
Key	MyGL.hpp	/^class Key : public Input {$/;"	c
MYGL_HPP	MyGL.hpp	38;"	d
MouseButton	MyGL.hpp	/^    MouseButton(int button, int action, int mods) : button{button}, action{action}, mods{mods} {}$/;"	f	class:MouseButton
MouseButton	MyGL.hpp	/^class MouseButton : public Input {$/;"	c
MyGL	MyGL.cpp	/^MyGL::MyGL() {$/;"	f	class:MyGL
MyGL	MyGL.hpp	/^class MyGL {$/;"	c
PNG	MyGL.cpp	/^PNG::PNG() : imageName(NULL), data(NULL) {$/;"	f	class:PNG
PNG	MyGL.cpp	/^PNG::PNG(char imageName[]) : data(NULL) {$/;"	f	class:PNG
PNG	MyGL.hpp	/^class PNG {$/;"	c
ShaderProgram	MyGL.cpp	/^ShaderProgram::ShaderProgram(std::string vertexShaderFileName, std::string fragmentShaderFileName) {$/;"	f	class:ShaderProgram
ShaderProgram	MyGL.hpp	/^class ShaderProgram {$/;"	c
ShaderTextured	MyGL.hpp	/^class ShaderTextured : ShaderProgram {$/;"	c
Shape	MyGL.cpp	/^Shape::Shape(float x, float y) {$/;"	f	class:Shape
Shape	MyGL.hpp	/^class Shape {$/;"	c
SnakeGame	MyGL.hpp	/^namespace SnakeGame {$/;"	n
View	MyGL.cpp	/^View::View(Window *window, int width, int height) {$/;"	f	class:View
View	MyGL.hpp	/^class View {$/;"	c
Window	MyGL.cpp	/^Window::Window(MyGL *parent, int width, int height, const WindowHints& wh) {$/;"	f	class:Window
Window	MyGL.hpp	/^class Window {$/;"	c
WindowHints	MyGL.cpp	/^WindowHints::WindowHints() {$/;"	f	class:WindowHints
WindowHints	MyGL.cpp	/^WindowHints::WindowHints(const WindowHints& wh) {$/;"	f	class:WindowHints
WindowHints	MyGL.hpp	/^struct WindowHints {$/;"	s
action	MyGL.hpp	/^    int action;$/;"	m	class:Key
action	MyGL.hpp	/^    int action;$/;"	m	class:MouseButton
button	MyGL.hpp	/^    int button;$/;"	m	class:MouseButton
checkShaderStepSuccess	MyGL.cpp	/^void ShaderProgram::checkShaderStepSuccess(GLuint shader, GLuint status) {$/;"	f	class:ShaderProgram
clearColor	MyGL.hpp	/^    glm::vec3 clearColor;$/;"	m	struct:WindowHints
clearColorBlue	MyGL.hpp	/^    float clearColorBlue;$/;"	m	class:Window
clearColorGreen	MyGL.hpp	/^    float clearColorGreen;$/;"	m	class:Window
clearColorRed	MyGL.hpp	/^    float clearColorRed;$/;"	m	class:Window
close	MyGL.cpp	/^void Window::close() {$/;"	f	class:Window
contextMutex	MyGL.cpp	/^std::mutex contextMutex;$/;"	v
contexts	MyGL.hpp	/^    std::vector<std::unique_ptr<Context>> contexts;$/;"	m	class:MyGL
currentContext	MyGL.hpp	/^    Context *currentContext;$/;"	m	class:MyGL
currentShaderProgram	MyGL.hpp	/^    ShaderProgram *currentShaderProgram;$/;"	m	class:MyGL
currentShape	MyGL.hpp	/^    Shape *currentShape;$/;"	m	class:Context
currentView	MyGL.hpp	/^    View *currentView;$/;"	m	class:Window
cursor_position_callback	MyGL.cpp	/^void glfwInputCallback::cursor_position_callback(GLFWwindow *window, double xpos, double ypos) {$/;"	f	class:glfwInputCallback
data	MyGL.hpp	/^    std::vector<float> data;$/;"	m	class:Shape
data	MyGL.hpp	/^    unsigned char *data;$/;"	m	class:PNG
dataLength	MyGL.cpp	/^int Shape::dataLength() {$/;"	f	class:Shape
drop_callback	MyGL.cpp	/^void glfwInputCallback::drop_callback(GLFWwindow *window, int count, const char **paths)$/;"	f	class:glfwInputCallback
endX	MyGL.hpp	/^    float startX, startY, endX, endY;$/;"	m	class:Shape
endY	MyGL.hpp	/^    float startX, startY, endX, endY;$/;"	m	class:Shape
error_callback	MyGL.cpp	/^static void error_callback(int error, const char* description) {$/;"	f	file:
finalRender	MyGL.cpp	/^void Shape::finalRender() {$/;"	f	class:Shape
finish	MyGL.cpp	/^void Shape::finish() {$/;"	f	class:Shape
frameRender	MyGL.cpp	/^void Shape::frameRender() {$/;"	f	class:Shape
genLotsWindows	MyGL.cpp	/^void MyGL::genLotsWindows() {$/;"	f	class:MyGL
glfwInputCallback	MyGL.hpp	/^namespace glfwInputCallback {$/;"	n
glfwMutex	MyGL.cpp	/^std::mutex glfwMutex;$/;"	v
glfw_context_version_major	MyGL.hpp	/^	unsigned int glfw_context_version_major;$/;"	m	struct:WindowHints
glfw_context_version_minor	MyGL.hpp	/^	unsigned int glfw_context_version_minor;$/;"	m	struct:WindowHints
glfw_decorated	MyGL.hpp	/^    unsigned int glfw_decorated;$/;"	m	struct:WindowHints
glfw_focused	MyGL.hpp	/^    unsigned int glfw_focused;$/;"	m	struct:WindowHints
glfw_opengl_forward_compat	MyGL.hpp	/^    unsigned int glfw_opengl_forward_compat;$/;"	m	struct:WindowHints
glfw_opengl_profile	MyGL.hpp	/^	unsigned int glfw_opengl_profile;$/;"	m	struct:WindowHints
glfw_resizable	MyGL.hpp	/^	unsigned int glfw_resizable;$/;"	m	struct:WindowHints
glfw_visible	MyGL.hpp	/^    unsigned int glfw_visible;$/;"	m	struct:WindowHints
handles	MyGL.cpp	/^bool Window::handles(GLFWwindow *window) {$/;"	f	class:Window
height	MyGL.cpp	/^int PNG::height() {$/;"	f	class:PNG
height	MyGL.hpp	/^    int height;$/;"	m	class:View
height	MyGL.hpp	/^    int height;$/;"	m	class:Window
hide	MyGL.cpp	/^void Window::hide() {$/;"	f	class:Window
id	MyGL.cpp	/^GLuint ShaderProgram::id() {$/;"	f	class:ShaderProgram
image	MyGL.hpp	/^    png_image image;$/;"	m	class:PNG
imageName	MyGL.hpp	/^    char* imageName;$/;"	m	class:PNG
inputFunction	MyGL.hpp	/^    std::function<void(const Key&)> inputFunction;$/;"	m	class:MyGL
key	MyGL.hpp	/^    int key;$/;"	m	class:Key
key_callback	MyGL.cpp	/^void glfwInputCallback::key_callback(GLFWwindow *window, int key, int scancode, int action, int mods) {$/;"	f	class:glfwInputCallback
lengthOfData	MyGL.hpp	/^    int lengthOfData = 12;$/;"	m	class:Shape
location	MyGL.hpp	/^    glm::vec2 location;$/;"	m	struct:WindowHints
loop	MyGL.cpp	/^void Window::loop() {$/;"	f	class:Window
main	main.cpp	/^int main(int argc, char** argv) {$/;"	f
mainLoop	MyGL.cpp	/^void MyGL::mainLoop() {$/;"	f	class:MyGL
makeWindowForContext	MyGL.cpp	/^GLFWwindow* MyGL::makeWindowForContext() {$/;"	f	class:MyGL
mods	MyGL.hpp	/^    int mods;$/;"	m	class:Key
mods	MyGL.hpp	/^    int mods;$/;"	m	class:MouseButton
monitor_callback	MyGL.cpp	/^void monitor_callback(GLFWmonitor *monitor, int x) {$/;"	f
mouse_button_callback	MyGL.cpp	/^void glfwInputCallback::mouse_button_callback(GLFWwindow *window, int button, int action, int mods) {$/;"	f	class:glfwInputCallback
moveAbsolute	MyGL.cpp	/^void Window::moveAbsolute(int x, int y) {$/;"	f	class:Window
moveRelative	MyGL.cpp	/^void Window::moveRelative(int x, int y) {$/;"	f	class:Window
newFoodLocation	MyGL.cpp	/^int SnakeGame::newFoodLocation(int snakeSize, int gridSize, std::unordered_map<int, std::unique_ptr<Window>>& grid) {$/;"	f	class:SnakeGame
parentMyGL	MyGL.hpp	/^    MyGL *parentMyGL;$/;"	m	class:Window
parentWindow	MyGL.hpp	/^    Window *parentWindow;$/;"	m	class:View
pixelToRealX	MyGL.cpp	/^double View::pixelToRealX(double px) {$/;"	f	class:View
pixelToRealY	MyGL.cpp	/^double View::pixelToRealY(double py) {$/;"	f	class:View
pixels	MyGL.cpp	/^unsigned char* PNG::pixels() {$/;"	f	class:PNG
printMonitorInfo	MyGL.cpp	/^void printMonitorInfo() {$/;"	f
printShaderLog	MyGL.cpp	/^void ShaderProgram::printShaderLog(char *errorMessage, GLuint shader) {$/;"	f	class:ShaderProgram
program	MyGL.hpp	/^    GLuint program;$/;"	m	class:ShaderProgram
readFile	MyGL.cpp	/^std::string ShaderProgram::readFile(std::string fileName) {$/;"	f	class:ShaderProgram
readPNG	MyGL.cpp	/^unsigned char* PNG::readPNG(char *imageName) {$/;"	f	class:PNG
render	MyGL.cpp	/^void Context::render(ShaderProgram *shader, View *view) {$/;"	f	class:Context
render	MyGL.cpp	/^void Shape::render() {$/;"	f	class:Shape
renderFunc	MyGL.cpp	/^typedef void (Shape::*renderFunc)();$/;"	t	file:
renderFunc	MyGL.hpp	/^    typedef void (Shape::*renderFunc)(void);$/;"	t	class:Shape
renderPtr	MyGL.hpp	/^    renderFunc renderPtr; \/** points to either frameRender or finalRender *\/$/;"	m	class:Shape
scale	MyGL.cpp	/^void View::scale(float num) {}$/;"	f	class:View
scancode	MyGL.hpp	/^    int scancode;$/;"	m	class:Key
screenHeight	MyGL.hpp	/^    GLint screenHeight;$/;"	m	class:ShaderProgram
screenWidth	MyGL.hpp	/^    GLint screenWidth;$/;"	m	class:ShaderProgram
scroll_callback	MyGL.cpp	/^void glfwInputCallback::scroll_callback(GLFWwindow *window, double xoffset, double yoffset) {$/;"	f	class:glfwInputCallback
shader	MyGL.hpp	/^    ShaderProgram *shader;$/;"	m	class:Shape
shaderPrograms	MyGL.hpp	/^    std::vector<std::unique_ptr<ShaderProgram>> shaderPrograms;$/;"	m	class:MyGL
shapes	MyGL.hpp	/^    std::vector<Shape*> shapes;$/;"	m	class:Context
show	MyGL.cpp	/^void Window::show() {$/;"	f	class:Window
snakeGame	MyGL.cpp	/^void SnakeGame::snakeGame(MyGL *application) {$/;"	f	class:SnakeGame
startX	MyGL.hpp	/^    float startX, startY, endX, endY;$/;"	m	class:Shape
startY	MyGL.hpp	/^    float startX, startY, endX, endY;$/;"	m	class:Shape
stepEast	MyGL.cpp	/^void SnakeGame::stepEast() {}$/;"	f	class:SnakeGame
stepNorth	MyGL.cpp	/^void SnakeGame::stepNorth() {}$/;"	f	class:SnakeGame
stepSouth	MyGL.cpp	/^void SnakeGame::stepSouth() {}$/;"	f	class:SnakeGame
stepWest	MyGL.cpp	/^void SnakeGame::stepWest() {}$/;"	f	class:SnakeGame
t	MyGL.hpp	/^    std::unique_ptr<std::thread> t;$/;"	m	class:Window
threadFunc	MyGL.hpp	/^    typedef void (Window::*threadFunc)(void);$/;"	t	class:Window
translate	MyGL.cpp	/^void View::translate(float x, float y) {$/;"	f	class:View
unitsPerPixelX	MyGL.hpp	/^    GLint unitsPerPixelX;$/;"	m	class:ShaderProgram
unitsPerPixelX	MyGL.hpp	/^    double unitsPerPixelX = 1.0;$/;"	m	class:View
unitsPerPixelY	MyGL.hpp	/^    GLint unitsPerPixelY;$/;"	m	class:ShaderProgram
unitsPerPixelY	MyGL.hpp	/^    double unitsPerPixelY = 1.0;$/;"	m	class:View
vao	MyGL.hpp	/^    GLuint vao;$/;"	m	class:Shape
vbo	MyGL.hpp	/^    GLuint vbo;$/;"	m	class:Shape
viewOffsetX	MyGL.hpp	/^    GLint viewOffsetX;$/;"	m	class:ShaderProgram
viewOffsetX	MyGL.hpp	/^    double viewOffsetX = 0.0;$/;"	m	class:View
viewOffsetY	MyGL.hpp	/^    GLint viewOffsetY;$/;"	m	class:ShaderProgram
viewOffsetY	MyGL.hpp	/^    double viewOffsetY = 0.0;$/;"	m	class:View
views	MyGL.hpp	/^    std::vector<View*> views;$/;"	m	class:Window
width	MyGL.cpp	/^int PNG::width() {$/;"	f	class:PNG
width	MyGL.hpp	/^    int width;$/;"	m	class:View
width	MyGL.hpp	/^    int width;$/;"	m	class:Window
window	MyGL.hpp	/^    GLFWwindow *window; \/** The window class needs to know which GLFWwindow it is taking care of. 1 Window for 1 GLFWwindow*\/$/;"	m	class:Window
windowForContext	MyGL.hpp	/^    GLFWwindow* windowForContext;$/;"	m	class:MyGL
window_move_callback	MyGL.cpp	/^void glfwInputCallback::window_move_callback(GLFWwindow *window, int x, int y) {$/;"	f	class:glfwInputCallback
window_resize_callback	MyGL.cpp	/^void glfwInputCallback::window_resize_callback(GLFWwindow *window, int width, int height) {$/;"	f	class:glfwInputCallback
windows	MyGL.hpp	/^    std::list<Window*> windows;$/;"	m	class:MyGL
writePNG	MyGL.cpp	/^void PNG::writePNG(char imageName[], unsigned char *data, int width, int height) {$/;"	f	class:PNG
x	MyGL.hpp	/^    double x;$/;"	m	class:CursorMovement
y	MyGL.hpp	/^    double y;$/;"	m	class:CursorMovement
~MyGL	MyGL.cpp	/^MyGL::~MyGL() {$/;"	f	class:MyGL
~Window	MyGL.cpp	/^Window::~Window() {$/;"	f	class:Window
